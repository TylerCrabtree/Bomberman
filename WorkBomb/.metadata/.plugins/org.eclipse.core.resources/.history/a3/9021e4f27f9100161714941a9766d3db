package bman;
import org.newdawn.slick.AppGameContainer;

import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;

import jig.Entity;
import jig.ResourceManager;
import jig.sat.resource.*;
import jig.Vector;

public class BombermanGame extends BasicGame {
	public final int ScreenWidth;
	public final int ScreenHeight;
	public static final String RIGHT_RSC = "resource/right.png";
	public static final String LEFT_RSC = "resource/left.png";
	public static final String BOMB_RSC = "resource/bomb.png";

	Bomberman bomberman;
	Bomb bomb;
	int bounces = 0;
	
public BombermanGame(String title, int width, int height) {
 super(title);
 ScreenHeight = height;
 ScreenWidth = width;
 Entity.setCoarseGrainedCollisionBoundary(Entity.AABB);
 }
 
 @Override
 public void render(GameContainer container, Graphics g)
		 throws SlickException {
		 bomberman.render(g);
		 bomb.render(g);
		}
 @Override
 public void init(GameContainer container) throws SlickException {
	 ResourceManager.loadImage(RIGHT_RSC);
	 ResourceManager.loadImage(LEFT_RSC);
	 ResourceManager.loadImage(BOMB_RSC);

	  bomberman = new Bomberman(ScreenWidth / 2, ScreenHeight / 2, .1f, .2f);
	  bomb = new Bomb(ScreenWidth * 2, ScreenHeight * 2, .1f, .2f);
	  bomb.destroy();
 }
 
 
 @Override
 public void update(GameContainer container, int delta)
		 throws SlickException {
		 // get user input
		 Input input = container.getInput();
		 if (input.isKeyDown(Input.KEY_UP)) {
			 bomberman.setVelocity(bomberman.getVelocity().add(new Vector(0f, -.001f)));
		 }
		 if (input.isKeyDown(Input.KEY_DOWN)) {
			 bomberman.setVelocity(bomberman.getVelocity().add(new Vector(0f, +.001f)));
		 }
		 if (input.isKeyDown(Input.KEY_LEFT)) {
			 bomberman.destroy();
			 bomberman.createLeft();
			 bomberman.setVelocity(bomberman.getVelocity().add(new Vector(-.001f, 0)));
		 }
		 if (input.isKeyDown(Input.KEY_RIGHT)) {
			 bomberman.destroy();
			 bomberman.createRight();
			 bomberman.setVelocity(bomberman.getVelocity().add(new Vector(+.001f, 0f)));
		 }
		 if (input.isKeyDown(Input.KEY_SPACE)) {
			 bomb.createBomb();
			 Vector pos = bomberman.getPosition();
			 bomb.setPosition(pos);;
		 }
		 // bounce the ball...
		 boolean bounced = false;
		 if (bomberman.getCoarseGrainedMaxX() > ScreenWidth
		 || bomberman.getCoarseGrainedMinX() < 0) {
			 bomberman.bounce(90);
		 bounced = true;
		 } else if (bomberman.getCoarseGrainedMaxY() > ScreenHeight
		 || bomberman.getCoarseGrainedMinY() < 0) {
			 bomberman.bounce(0);
		 bounced = true;
		 }
		 if (bounced) {
		 bounces++;
		// explosions.add(new Bang(ball.getX(), ball.getY()));
		 }
		 bomberman.update(delta);
		float x = bomberman.getVelocity().getX();
		float y = bomberman.getVelocity().getX();
		//bomberman.setX(x);
		//bomberman.setVelocity((Vector) 0 );


		 // check if there are any finished explosions, if so remove them
		
		 
		}
 public static void main(String[] args) {
	 AppGameContainer app;
	 try {
	 app = new AppGameContainer(new BombermanGame("Bounce!", 800, 600));
	 app.setDisplayMode(800, 600, false);
	 app.setVSync(true);
	 app.start();
	 } catch (SlickException e) {
}
 }
 }